// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/signers/hd/config/config.proto

package hd

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignerConfig struct {
	Mnemonic string `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	Path     *Path  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *SignerConfig) Reset()         { *m = SignerConfig{} }
func (m *SignerConfig) String() string { return proto.CompactTextString(m) }
func (*SignerConfig) ProtoMessage()    {}
func (*SignerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed18b2634dd9c89, []int{0}
}
func (m *SignerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerConfig.Merge(m, src)
}
func (m *SignerConfig) XXX_Size() int {
	return m.Size()
}
func (m *SignerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SignerConfig proto.InternalMessageInfo

type Path struct {
	Purpose      uint32 `protobuf:"varint,1,opt,name=purpose,proto3" json:"purpose,omitempty"`
	CoinType     uint32 `protobuf:"varint,2,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	Account      uint32 `protobuf:"varint,3,opt,name=account,proto3" json:"account,omitempty"`
	Change       uint32 `protobuf:"varint,4,opt,name=change,proto3" json:"change,omitempty"`
	AddressIndex uint32 `protobuf:"varint,5,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed18b2634dd9c89, []int{1}
}
func (m *Path) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Path.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(m, src)
}
func (m *Path) XXX_Size() int {
	return m.Size()
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SignerConfig)(nil), "relayer.signers.hd.config.SignerConfig")
	proto.RegisterType((*Path)(nil), "relayer.signers.hd.config.Path")
}

func init() {
	proto.RegisterFile("relayer/signers/hd/config/config.proto", fileDescriptor_eed18b2634dd9c89)
}

var fileDescriptor_eed18b2634dd9c89 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4e, 0xc2, 0x30,
	0x18, 0xc7, 0x57, 0x45, 0x84, 0x0a, 0x97, 0xc6, 0x98, 0x89, 0x49, 0x25, 0x98, 0x18, 0x2e, 0x74,
	0x09, 0xbc, 0x81, 0x9e, 0xbc, 0x91, 0xe9, 0xc9, 0x0b, 0x29, 0xdd, 0x67, 0xdb, 0x04, 0xda, 0xa6,
	0xdb, 0x12, 0xf7, 0x16, 0x1e, 0x7c, 0x28, 0x8e, 0x1c, 0x3d, 0x2a, 0xbc, 0x88, 0x59, 0x99, 0x5e,
	0x8c, 0xa7, 0xed, 0xf7, 0xff, 0x7e, 0xff, 0xaf, 0x49, 0x8b, 0x6f, 0x3d, 0xac, 0x78, 0x05, 0x3e,
	0xc9, 0xb5, 0x34, 0xe0, 0xf3, 0x44, 0x65, 0x89, 0xb0, 0xe6, 0x45, 0xcb, 0xe6, 0xc3, 0x9c, 0xb7,
	0x85, 0x25, 0x97, 0x8d, 0xc7, 0x1a, 0x8f, 0xa9, 0x8c, 0x1d, 0x84, 0xc1, 0xb9, 0xb4, 0xd2, 0x06,
	0x2b, 0xa9, 0xff, 0x0e, 0x85, 0xd1, 0x02, 0xf7, 0x1e, 0x83, 0x7a, 0x1f, 0x2c, 0x32, 0xc0, 0x9d,
	0xb5, 0x81, 0xb5, 0x35, 0x5a, 0xc4, 0x68, 0x88, 0xc6, 0xdd, 0xf4, 0x97, 0xc9, 0x0c, 0xb7, 0x1c,
	0x2f, 0x54, 0x7c, 0x34, 0x44, 0xe3, 0xb3, 0xe9, 0x35, 0xfb, 0xf7, 0x2c, 0x36, 0xe7, 0x85, 0x4a,
	0x83, 0x3c, 0x7a, 0x47, 0xb8, 0x55, 0x23, 0x89, 0xf1, 0xa9, 0x2b, 0xbd, 0xb3, 0x39, 0x84, 0xc5,
	0xfd, 0xf4, 0x07, 0xc9, 0x15, 0xee, 0x0a, 0xab, 0xcd, 0xa2, 0xa8, 0x1c, 0x84, 0xe5, 0xfd, 0xb4,
	0x53, 0x07, 0x4f, 0x95, 0x83, 0xba, 0xc6, 0x85, 0xb0, 0xa5, 0x29, 0xe2, 0xe3, 0x43, 0xad, 0x41,
	0x72, 0x81, 0xdb, 0x42, 0x71, 0x23, 0x21, 0x6e, 0x85, 0x41, 0x43, 0xe4, 0x06, 0xf7, 0x79, 0x96,
	0x79, 0xc8, 0xf3, 0x85, 0x36, 0x19, 0xbc, 0xc6, 0x27, 0x61, 0xdc, 0x6b, 0xc2, 0x87, 0x3a, 0xbb,
	0x9b, 0x6f, 0xbe, 0x68, 0xb4, 0xd9, 0x51, 0xb4, 0xdd, 0x51, 0xf4, 0xb9, 0xa3, 0xe8, 0x6d, 0x4f,
	0xa3, 0xed, 0x9e, 0x46, 0x1f, 0x7b, 0x1a, 0x3d, 0x4f, 0xa5, 0x2e, 0x54, 0xb9, 0x64, 0xc2, 0xae,
	0x13, 0x55, 0x39, 0xf0, 0x2b, 0xc8, 0x24, 0xf8, 0xc9, 0x8a, 0x2f, 0xf3, 0xa4, 0x2a, 0xf5, 0xe4,
	0xef, 0x73, 0x2c, 0xdb, 0xe1, 0x42, 0x67, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x9a, 0xea,
	0xa8, 0xab, 0x01, 0x00, 0x00,
}

func (m *SignerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mnemonic) > 0 {
		i -= len(m.Mnemonic)
		copy(dAtA[i:], m.Mnemonic)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Mnemonic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Path) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Path) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Path) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.AddressIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.Change != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Change))
		i--
		dAtA[i] = 0x20
	}
	if m.Account != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Account))
		i--
		dAtA[i] = 0x18
	}
	if m.CoinType != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x10
	}
	if m.Purpose != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Purpose))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mnemonic)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *Path) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Purpose != 0 {
		n += 1 + sovConfig(uint64(m.Purpose))
	}
	if m.CoinType != 0 {
		n += 1 + sovConfig(uint64(m.CoinType))
	}
	if m.Account != 0 {
		n += 1 + sovConfig(uint64(m.Account))
	}
	if m.Change != 0 {
		n += 1 + sovConfig(uint64(m.Change))
	}
	if m.AddressIndex != 0 {
		n += 1 + sovConfig(uint64(m.AddressIndex))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &Path{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Path) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Path: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Path: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			m.Purpose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purpose |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Account |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			m.AddressIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
